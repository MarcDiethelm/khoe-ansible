---
# usage:
# ansible-playbook playbooks/user.yml -e task=create -e username=example1 -e password=1234
# ansible-playbook playbooks/user.yml -e task=delete -e username=example1

- hosts: khoe
  gather_facts: no

  tasks:

    - include_role:
        name: common
        tasks_from: load-config
      vars:
        file: "{{ config_file_users }}"

    - set_fact:
        users: "{{ config }}"

      ########################################
    - name: "Case: Create user {{ username }}"
      ########################################
      block:

        - include_role:
            name: user
            tasks_from: create

        - include_role:
            name: gpg
            tasks_from: create
          # todo: fingerprint should be read from the system, not stored. because idempotency. no conflicting sources of truth! (but backing up is still good.)
          when: users[username].fingerprint is undefined

        - include_role:
            name: docker-smb
            tasks_from: add-user-nas
          vars:
            user: "{{ users[username] }}"

        - include_role: # Create empty backup file list
            name: duply
            tasks_from: install

      when: task == "create"

      ########################################
    - name: "Case: Delete user {{ username }}"
      ########################################
      block:

        - include_role:
            name: docker-smb
            tasks_from: delete-user

        - include_role:
            name: user
            tasks_from: delete

        - include_role:
            name: gpg
            tasks_from: delete
          vars:
            fingerprint: "{{ users[username].fingerprint }}"
          when: users[username] is defined

        - name: Delete user "{{ username }}" from users config
          dict_element_delete:
            dict: "{{ users | from_yaml }}"
            key: "{{ username }}"
          register: result

        - name: "Update users var"
          set_fact:
            users: "{{ result.dict }}"

      when: task == "delete"

      # Storing in khoe ensures ability to restore user from backup (todo: backup)
    - name:  write updated users config
      import_role:
        name: common
        tasks_from: write-config
      vars:
        file: "{{ config_file_users }}"
        content: "{{ users }}"
        #do_backup: yes
