---
# usage:
# ansible-playbook playbooks/user.yml -e task=create -e username=example1 -e "password='1234'" [-e share_name=username] [-e disk_label=label] [-e "smbpassword='2345'"]
# ansible-playbook playbooks/user.yml -e task=delete -e username=example1

- hosts: khoe
  gather_facts: no

  pre_tasks:

      - assert:
          that:
            - username is defined

      - include_role:
          name: common
          tasks_from: load-config
        vars:
          file: "{{ config_file_users }}"
          varname: "users"

  tasks:

      ########################################
    - name: "Case: Create user {{ username }}"
      ########################################
      block:

        - assert:
            that:
              - password is defined

        - include_role:
            name: user
            tasks_from: create

        - include_role:
            name: gpg
            tasks_from: create

        - include_role:
            name: docker-smb
            tasks_from: create-share
          with_dict: "{ '{{ share_name }}': '' }"

        - include_role:
            name: docker-smb

        - include_role: # Create default backup file list, and create duply profile
            name: duply
            tasks_from: setup

      when: task == "create"

      ########################################
    - name: "Case: Delete user {{ username }}"
      ########################################
      block:

        - fail:
            msg: "User '{{ username }} not found in user config.'"
          when: users[username] is undefined

        - include_role:
            name: docker-smb
            tasks_from: delete-share
          with_dict: "{{ users[username].shares }}"

        - include_role:
            name: docker-smb
            tasks_from: delete-user

        - include_role:
            name: docker-smb

        - include_role:
            name: gpg
            tasks_from: delete
          vars:
            fingerprint: "{{ users[username].fingerprint }}"

        - include_role:
            name: user
            tasks_from: delete

      when: task == "delete"
