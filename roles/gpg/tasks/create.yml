---
- name: "Looking for existing keys {{ keyname }}"
  command: "gpg --with-colons --list-secret-keys {{ keyname }}"
  register: gpg_output
  failed_when: false
  changed_when: false

- name: "Get fingerprint from gpg output"
  set_fact:
    fingerprint: "{{ gpg_output.stdout | regex_search('[A-Z0-9]{40}', multiline=True) }}"
  when: gpg_output.stderr is not search("No secret key")

- debug:
    msg: "Found existing keys {{ keyname }}: fingerprint"
  when: fingerprint is defined


- block:

  - name: "Generate keys for user: '{{ username }}'."
    shell: "echo '{{ passphrase | default(omit) }}' | gpg2 --passphrase-fd 0 --pinentry-mode loopback --batch --status-fd 1 --with-colons --quick-gen-key {{ keyname }}" # used to be: --quick-generate-key
    register: gpg_output
     # gnupg does not support operations using su. Unable to ex/import keys this way.

  - name: "Get fingerprint from gpg output"
    set_fact:
      fingerprint: "{{ gpg_output.stdout | regex_search('[A-Z0-9]{40}', multiline=True) }}"

  # We are currently only generating primary keys. Disable expiration.
  # https://security.stackexchange.com/questions/14718/does-openpgp-key-expiration-add-to-security
  - name: 'Never expire primary key: {{ fingerprint }}.'
    shell: 'gpg2 --verbose --quick-set-expire {{ fingerprint }} 0'
    register: gpg_output

  when: fingerprint is not defined

- block:

    - include_tasks: write-fingerprint.yml

  when: fingerprint is defined
