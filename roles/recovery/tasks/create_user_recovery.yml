---
- name: "Create recovery directory on disk {{ recovery_disk_label }}."
  file:
    path: "{{ recovery_path }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0700
  become: yes

- name: "Copy duply profiles: user '{{ username }}', disk: '{{ recovery_disk_label }}'"
  command: cp -r {{ duply_profiles_path|quote }} {{ recovery_path|quote }}
  become: yes

- name: "Copy user's config dir: user '{{ username }}', disk: '{{ recovery_disk_label }}'"
  command: cp -r {{ config_dir_user|quote }} {{ recovery_path|quote }}
  become: yes

- name: "Write user config file: {{ recovery_path }}/{{ file_user }}."
  copy:
    content: "{{ users[username] | to_nice_yaml }}"
    dest: "{{ recovery_path }}/{{ file_user }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0700
  become: yes

- set_fact:
    shares: {}
- set_fact:
    shares: "{{ shares | combine( { username + '_' + item.key: smb.shares[username + '_' + item.key] } ) }}"
  loop: "{{ users[username].shares | dict2items }}"

- name: Create `smb_recovery` dict, with all shares and just the owner in `smb_recovery.users`.
  set_fact: # additional users' access right is preserved in `smb_recovery.shares`, but the actual users must be restored through their own recovery.
    smb_recovery: "{{ { 'shares': shares, 'users': { username: smb.users[username] } } }}"

- name: "Write smb config file: {{ recovery_path }}/{{ file_smb }}."
  copy:
    content: "{{ smb_recovery | to_nice_yaml }}"
    dest: "{{ recovery_path }}/{{ file_smb }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0700
  become: yes

- include_role:
    name: gpg
    tasks_from: export
  vars:
    export_path: "{{ gpg_export_dir }}"
