---
- include_tasks: sourcepath.yml

- set_fact:
    _fetch_path: "{{ share_name }}/{{ fetch_path }}"

- debug:
    msg: |
      Restore a file/dir from backup to {{ restore_target }}, user: '{{ username }}', profile: '{{ profile_name }}'
      Backup location: {{ remote.backup_location }}"
      Path in backup: '{{ _fetch_path }}'

- file:
    path: "{{ restore_target }}"
    state: absent
  become: yes

- name: "Ensure restore target directory is present: {{ restore_target }}."
  file:
    path: "{{ restore_target }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0755
  become: yes

# Using `sudo` as on the command line works, using `become` fails
# `shell` command and wrapping `fetch_path` in single quotes is needed to correctly handle spaces and possibly UTF-8 chars

# Explanation for the GPG_OPTS env var: needed for gpg to use passphrase from duply
# https://lists.launchpad.net/duplicity-team/msg02653.html

- block:
    - name: Restore from file system
      shell: "sudo -E duply /home/{{ username }}/.duply/{{ profile_name }} fetch '{{ _fetch_path }}' '{{ restore_target }}/{{ _fetch_path | basename }}' {{ age }}"
      environment:
        GPG_OPTS: '--pinentry-mode loopback'
      register: duply
      failed_when: duply.stdout is search("Errno") or duply.rc > 0
    - debug:
        var: duply.stdout
  when: remote.backup_location is match('^file:///')

- block:
    - name: Restore from S3 storage
      shell: "sudo -E duply /home/{{ username }}/.duply/{{ profile_name }} fetch '{{ _fetch_path }}' '{{ restore_target }}/{{ _fetch_path | basename }}' {{ age }}"
      environment:
        GPG_OPTS: '--pinentry-mode loopback'
        AWS_ACCESS_KEY_ID: "{{ remote.api_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ remote.api_key_secret }}"
      register: duply
      failed_when: duply.stdout is search("Errno") or duply.rc > 0
    - debug:
        var: duply.stdout
  when: remote.backup_location is match('^s3://')

  # Add more fetch setups here
